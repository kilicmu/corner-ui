import{compile as e}from"@vue/compiler-dom";import r from"markdown-it";import o from"highlight.js";import t from"markdown-it-deflist";import n from"markdown-it-abbr";import i from"markdown-it-mark";import l from"markdown-it-emoji";import s from"markdown-it-container";import u from"markdown-it-multimd-table";import a from"markdown-it-task-lists";class m{}m.NORMAL_TAG_VALIDATE=/^.*$/,m.SUCCESS_TAG_VALIDATE=/^success(.*)$/,m.WARNING_TAG_VALIDATE=/^warning(.*)$/,m.ERROR_TAG_VALIDATE=/^error(.*)$/;const c={success:m.SUCCESS_TAG_VALIDATE,warning:m.WARNING_TAG_VALIDATE,error:m.ERROR_TAG_VALIDATE},d=e=>`\n    <pre class="hljs">\n        <code>\n            ${e}\n        </code>\n    </pre>\n`,f=new r({html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!0,typographer:!0,highlight:function(e,r){if(!r||!o.getLanguage(r))return d(f.utils.escapeHtml(e));try{const{value:t}=o.highlight(e,r);return d(t)}catch(t){}}});f.use(t).use(n).use(i).use(l).use(u).use(a,{enable:!0,label:!0,labelAfter:!0}),((e,r)=>{var o;const t=[...Object.keys(r),"normal"];for(let n of t){const t=null!=(o=null==r?void 0:r[n])?o:m.NORMAL_TAG_VALIDATE;e.use(s,n,{validate:e=>e.trim().match(t),render:function(r,o){var i,l=r[o].info.trim().match(t);return 1===r[o].nesting?`<blockquote class='${n}'><p>${e.utils.escapeHtml(null!=(i=null==l?void 0:l[1])?i:"")}</p>\n`:"</blockquote>\n"}})}})(f,c);const p=r=>{let o="";try{o=f.render(r)}catch(t){return new Error("[vue-markdown-resolver]: transform markdown fail, check your markdown source accord with target rules:"+t.message)}return(r=>{let o="";try{o=e(r,{mode:"module"}).code}catch(t){throw t}if(o.includes("export default"))return o;{const e=o.indexOf("function render");if(-1===e)throw new Error("[vue-markdown-resolver]: @vue/compiler compiled resource doesn't contain function render\n             please check your @vue/compiler version: 3.0.11.");return o.slice(0,e-1).endsWith("default")?o:o.slice(0,e)+" default "+o.slice(e)}})(o)};function A(e){return(e=>{var r,o;null!=(o=null==(r=null==e?void 0:e.plugins)?void 0:r.length)&&o&&((e,r)=>{for(const o of r)if("object"==typeof o)if(o.options){const{options:r}=o;e.use(o.plugin,r)}else{const{params:r}=o;r?e.use(o.plugin,...r):e.use(o.plugin)}else e.use(o)})(f,e.plugins)})(e),{name:"vite-plugin-vue-markdown-resolver",transform(e,r){if(/\.(md)$/.test(r))return{code:p(e),map:null}}}}export default A;
